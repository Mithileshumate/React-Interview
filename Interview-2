Que-1.What is the Difference between react and react native? Which one is library or framework?
Ans-- React and React Native are developed by Facebook and have gained a huge fan base in a short time. React is known as ReactJs, which is a JavaScript library to build single-page web applications.

Besides, React Native is a React JS-based framework to design mobile apps. Moreover, with reusable components, you can develop native mobile applications.

i.React is a JavaScript library of reusable components designed to create skeletons of the apps, whereas React Native is designed to build native mobile apps with reusable components.
ii.React is an open-source JS library for building the UIs for web applications; besides, React Native is used to build rich mobile UI from declarative components using only JavaScript.
iii.Both React and React Native are ruling the industry and are widely used for mobile and web applications. However, the difference between web apps vs websites will not affect your user.


Que-2.What is the package name you are using for routing?
Ans-- i.React Router is a standard library system built on top of the React and used to create routing in the React application using React Router Package.
ii.You can install React Router from the public npm registry with either npm or yarn . Since we're building a web app, we'll use react-router-dom in this guide.
iii. npm i react-router-dom


Que-3.Routing Implementation
Ans--  import { render } from "react-dom";
import {BrowserRouter,Routes,Route} from "react-router-dom";
import App from "./App";
import Expenses from "./routes/expenses";
import Invoices from "./routes/invoices";

const rootElement = document.getElementById("root");
render(
  <BrowserRouter>
    <Routes>
      <Route path="/" element={<App />} />
      <Route path="expenses" element={<Expenses />} />
      <Route path="invoices" element={<Invoices />} />
    </Routes>
  </BrowserRouter>,
);


Que-4.How do you pass data from parent to child?
Ans-- React.js allows us to use props (short form of property) to pass data from parent component to child component.
 We have to set props value inside the child component, while we embed it to the parent component.

import React from 'react';

function Parent(){
    const data = 'Data from parent';
    return(
        <div>
            <Child dataParentToChild = {data}/>
        </div>
    )
}

function Child ({dataParentToChild}){
    return(
        <div>
            {dataParentToChild}
        </div>
    )
}

export default Parent;


 Que-5.What is lazy loading in react ?
 Ans-- In essence, lazy loading means that a component or a part of code must get loaded when it is required. It is also referred to as code splitting and data fetching . Talking about React specifically, it bundles the complete code and deploys all of it at the same time.

Example:An example of image lazy-loading can be found on the popular publishing platform Medium, which loads lightweight placeholder images at page load, and replaces them with lazily-loaded images as they're scrolled into the viewport. An example of image lazy-loading in action.

Benefits: The benefits of lazy loading include: Reduces initial load time – Lazy loading a webpage reduces page weight, allowing for a quicker page load time. Bandwidth conservation – Lazy loading conserves bandwidth by delivering content to users only if it's requested.


Que-6.Difference b/w Stateful and stateless Component.
Ans-- Stateful component--> If the behaviour of a component is dependent on the state of the component then it can be termed as stateful component. These stateful components are always class components and have a state that gets initialized in the constructor. 

class App extends Component { constructor(props) { super(props) this.state = { count: 0 } }

  render() {
    // ...
  }
}

React 16.8 Update: Hooks let you use state and other React features without writing classes. The Equivalent Functional Component import React, {useState} from 'react';

const App = (props) => {
  const [count, setCount] = useState(0);

  return (
    // JSX
  )
}

stateless component --> If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless we need to use a lifecycle hook in your components, we should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the this keyword altogether.


Que-7.How do you switch one component to another, Conditional Rendering
Ans-- Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.

When one component uses another like this, a parent-child relationship is formed. In above example, the App component is the parent to the Header and Footer components, and the Header and Footer components are the child of the App component.


Exa-- src\components\Header.js

import React, { Component } from 'react';
 
class Header extends Component {
  render() {
    return (
      <div>
        This is header component.
      </div>
    );
  }
}
 
export default Header;

src\components\Footer.js--

import React, { Component } from 'react';
 
class Footer extends Component {
  render() {
    return (
      <div>
        This is Footer component.
      </div>        
    );
  }
}
 
export default Footer;

src\App.js-- 
import React, { Component } from 'react';
import Header from './components/Header';
import Footer from './components/Footer';
 
class App extends Component {
  render() {
    return (
      <div>
        <Header />
        <Footer />
      </div>
    );
  }
}
 
export default App;